<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:PhasmophobiaSaveEditor.Controls"
                    xmlns:fluent="clr-namespace:PhasmophobiaSaveEditor.Controls.Fluent"
                    xmlns:themes="clr-namespace:PhasmophobiaSaveEditor.Themes">

    <Style x:Key="DropDownButtonStyle" TargetType="{x:Type controls:DropDownButton}">
        <Setter Property="Background" Value="{themes:FluentResource MainBrush}" />
        <Setter Property="BorderBrush" Value="{themes:FluentResource MainBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="DropDownMinHeight" Value="3" />
        <Setter Property="DropDownMinWidth" Value="3" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontFamily" Value="{themes:FluentResource FontFamily}" />
        <Setter Property="FontSize" Value="{themes:FluentResource FontSize}" />
        <Setter Property="Foreground" Value="{themes:FluentResource MarkerBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="IsOpen" Value="False" />
        <Setter Property="Margin" Value="4,2" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:DropDownButton}">
                    <Grid>
                        <Border x:Name="BorderVisual"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="FocusVisual"
                                Background="{x:Null}"
                                BorderBrush="{TemplateBinding fluent:FluentAssist.FocusBrush}"
                                BorderThickness="{themes:FluentResource FocusThickness}"
                                CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                                IsHitTestVisible="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="Collapsed" />
                        <fluent:FluentControl VerticalAlignment="Stretch"
                                              HorizontalContentAlignment="Stretch"
                                              BorderThickness="{TemplateBinding BorderThickness}"
                                              CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                                              IsRippleEnabled="{TemplateBinding fluent:FluentAssist.IsEnabled}"
                                              IsSmartClipped="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Content"
                                                  Grid.Row="1"
                                                  Grid.Column="1"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:DropDownButton}},
                                                                                Path=HorizontalContentAlignment}"
                                                  VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:DropDownButton}},
                                                                              Path=VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  RecognizesAccessKey="True"
                                                  TextBlock.Foreground="{TemplateBinding Foreground}" />
                                <Grid x:Name="DropDownIndicator"
                                      Grid.Row="2"
                                      Grid.Column="1"
                                      Margin="5"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Canvas.ZIndex="2"
                                      IsHitTestVisible="False"
                                      Visibility="{TemplateBinding DropDownIndicatorVisibility}">
                                    <!--<telerik1:RadGlyph x:Name="arrow" Foreground="{themes:FluentResource ResourceKey=IconBrush}" Glyph="{StaticResource GlyphArrowChevronDown}"/>-->
                                </Grid>
                            </Grid>
                        </fluent:FluentControl>
                        <Popup x:Name="DropDownPopup"
                               AllowsTransparency="True"
                               Focusable="False"
                               HorizontalOffset="0"
                               IsOpen="{Binding IsOpen,
                                                RelativeSource={RelativeSource TemplatedParent},
                                                Mode=TwoWay}"
                               Placement="Bottom"
                               PopupAnimation="{TemplateBinding PopupAnimation}"
                               StaysOpen="False"
                               VerticalOffset="0">
                            <Grid x:Name="PopupGrid" Margin="3,0,3,3">
                                <!--<mat:Shadow x:Name="PopupShadow"
                                        ShadowDepth="{TemplateBinding fluent:FluentAssist.ShadowDepth}"
                                        SnapsToDevicePixels="True"
                                        BorderBrush="Transparent"
                                        BorderThickness="0"
                                        Background="{themes:FluentResource ResourceKey=AlternativeBrush}"
                                        CornerRadius="{themes:FluentResource ResourceKey=CornerRadiusBottom}"/>-->
                                <Border x:Name="DropDownPopupBorder"
                                        Width="{TemplateBinding DropDownWidth}"
                                        Height="{TemplateBinding DropDownHeight}"
                                        MinWidth="{TemplateBinding DropDownMinWidth}"
                                        MinHeight="{TemplateBinding DropDownMinHeight}"
                                        MaxWidth="{TemplateBinding DropDownMaxWidth}"
                                        MaxHeight="{TemplateBinding DropDownMaxHeight}"
                                        Background="{themes:FluentResource AlternativeBrush}"
                                        BorderBrush="Transparent"
                                        BorderThickness="0"
                                        CornerRadius="{themes:FluentResource CornerRadiusBottom}">
                                    <ContentControl x:Name="DropDownPopupContent"
                                                    HorizontalAlignment="Stretch"
                                                    VerticalAlignment="Stretch"
                                                    HorizontalContentAlignment="Stretch"
                                                    VerticalContentAlignment="Stretch"
                                                    Content="{TemplateBinding DropDownContent}"
                                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                    ContentTemplate="{TemplateBinding DropDownContentTemplate}"
                                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                    DataContext="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                                          Path=DataContext}" />
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  background is hidden  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <!--<Condition Property="IsBackgroundVisible" Value="False" />-->
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsOpen" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                        </MultiTrigger>

                        <!--  General IsFocused setters  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <!--  General setters for IsMouseOver  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.MouseOverBrush), Mode=OneWay}" />
                            <Setter TargetName="BorderVisual" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.MouseOverBrush), Mode=OneWay}" />
                        </Trigger>

                        <!--  General setters for IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.PressedBrush), Mode=OneWay}" />
                            <Setter TargetName="BorderVisual" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.PressedBrush), Mode=OneWay}" />
                        </Trigger>

                        <!--  General setters for IsOpen  -->
                        <Trigger Property="IsOpen" Value="True">
                            <!--<Setter TargetName="arrow" Property="Glyph" Value="{StaticResource GlyphArrowChevronUp}"/>-->
                            <Setter Property="fluent:FluentAssist.CornerRadius" Value="{themes:FluentResource CornerRadiusTop}" />
                            <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.CheckedBrush), Mode=OneWay}" />
                            <Setter TargetName="BorderVisual" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.CheckedBrush), Mode=OneWay}" />
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Collapsed" />
                            <!--<Setter TargetName="PopupShadow" Property="Visibility" Value="Visible" />-->
                        </Trigger>

                        <!--  disabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{themes:FluentResource AlternativeBrush}" />
                            <Setter Property="BorderBrush" Value="{themes:FluentResource AlternativeBrush}" />
                            <Setter TargetName="Content" Property="Opacity" Value="{themes:FluentResource DisabledOpacity}" />
                            <Setter TargetName="DropDownIndicator" Property="Opacity" Value="{themes:FluentResource DisabledOpacity}" />
                        </Trigger>

                        <!--  disabled and focused  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <!--  disabled & background is hidden  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <!--<Condition Property="IsBackgroundVisible" Value="False" />-->
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                        </MultiTrigger>

                        <!--  DropDownButtonPosition and DropDownPacement  -->
                        <Trigger Property="DropDownButtonPosition" Value="Bottom" />
                        <Trigger Property="DropDownButtonPosition" Value="Left">
                            <Setter TargetName="DropDownIndicator" Property="Grid.Column" Value="0" />
                            <Setter TargetName="DropDownIndicator" Property="Grid.Row" Value="1" />
                        </Trigger>
                        <Trigger Property="DropDownButtonPosition" Value="Top">
                            <Setter TargetName="DropDownIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="DropDownIndicator" Property="Grid.Row" Value="0" />
                        </Trigger>
                        <Trigger Property="DropDownButtonPosition" Value="Right">
                            <Setter TargetName="DropDownIndicator" Property="Grid.Column" Value="2" />
                            <Setter TargetName="DropDownIndicator" Property="Grid.Row" Value="1" />
                        </Trigger>
                        <Trigger Property="DropDownPlacement" Value="Bottom" />
                        <Trigger Property="DropDownPlacement" Value="Top">
                            <Setter TargetName="DropDownPopupBorder" Property="CornerRadius" Value="{themes:FluentResource CornerRadiusTop}" />
                            <Setter TargetName="PopupGrid" Property="Margin" Value="3,3,3,0" />
                            <!--<Setter TargetName="arrow" Property="Glyph" Value="{StaticResource GlyphArrowChevronUp}"/>-->
                            <!--<Setter TargetName="PopupShadow" Property="CornerRadius" Value="{themes:FluentResource CornerRadiusTop}" />-->
                        </Trigger>
                        <Trigger Property="DropDownPlacement" Value="Left">
                            <Setter TargetName="DropDownPopupBorder" Property="CornerRadius" Value="{themes:FluentResource CornerRadiusLeft}" />
                            <Setter TargetName="PopupGrid" Property="Margin" Value="3,3,0,3" />
                            <!--<Setter TargetName="arrow" Property="Glyph" Value="{StaticResource GlyphArrowChevronLeft}"/>-->
                            <!--<Setter TargetName="PopupShadow" Property="CornerRadius" Value="{themes:FluentResource CornerRadiusLeft}" />-->
                        </Trigger>
                        <Trigger Property="DropDownPlacement" Value="Right">
                            <Setter TargetName="DropDownPopupBorder" Property="CornerRadius" Value="{themes:FluentResource CornerRadiusRight}" />
                            <Setter TargetName="PopupGrid" Property="Margin" Value="0,3,3,3" />
                            <!--<Setter TargetName="arrow" Property="Glyph" Value="{StaticResource GlyphArrowChevronRight}"/>-->
                            <!--<Setter TargetName="PopupShadow" Property="CornerRadius" Value="{themes:FluentResource CornerRadiusRight}" />-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsOpen" Value="True" />
                                <Condition Property="DropDownPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="arrow" Property="Glyph" Value="{StaticResource GlyphArrowChevronDown}"/>-->
                            <Setter Property="fluent:FluentAssist.CornerRadius" Value="{themes:FluentResource CornerRadiusBottom}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsOpen" Value="True" />
                                <Condition Property="DropDownPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="arrow" Property="Glyph" Value="{StaticResource GlyphArrowChevronRight}"/>-->
                            <Setter Property="fluent:FluentAssist.CornerRadius" Value="{themes:FluentResource CornerRadiusRight}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsOpen" Value="True" />
                                <Condition Property="DropDownPlacement" Value="Right" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="arrow" Property="Glyph" Value="{StaticResource GlyphArrowChevronLeft}"/>-->
                            <Setter Property="fluent:FluentAssist.CornerRadius" Value="{themes:FluentResource CornerRadiusLeft}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="fluent:FluentAssist.CheckedBrush" Value="{themes:FluentResource PressedBrush}" />
        <Setter Property="fluent:FluentAssist.CornerRadius" Value="{themes:FluentResource CornerRadius}" />
        <Setter Property="fluent:FluentAssist.FocusBrush" Value="{themes:FluentResource AccentFocusedBrush}" />
        <Setter Property="fluent:FluentAssist.MouseOverBrush" Value="{themes:FluentResource MouseOverBrush}" />
        <Setter Property="fluent:FluentAssist.PressedBrush" Value="{themes:FluentResource PressedBrush}" />
        <!--<Setter Property="fluent:FluentAssist.ShadowDepth" Value="Depth1" />-->
    </Style>
    <Style BasedOn="{StaticResource DropDownButtonStyle}" TargetType="{x:Type controls:DropDownButton}" />

</ResourceDictionary>