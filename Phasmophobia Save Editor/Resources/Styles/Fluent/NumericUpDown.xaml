<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:PhasmophobiaSaveEditor.Controls"
                    xmlns:converters="clr-namespace:PhasmophobiaSaveEditor.Converters"
                    xmlns:fluent="clr-namespace:PhasmophobiaSaveEditor.Controls.Fluent"
                    xmlns:themes="clr-namespace:PhasmophobiaSaveEditor.Themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Resources/Styles/Fluent/Button.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="ArrowUpGeometry">
        F1 M32,32z M0,0z M28.903,23.69L28.903,23.69 16.014,10.8 3.125,23.69 1.71,22.275 16.014,7.972 30.318,22.275z
    </Geometry>
    <Geometry x:Key="ArrowDownGeometry">
        F1 M32,32z M0,0z M16.014,23.997L16.014,23.997 1.71,9.693 3.125,8.279 16.014,21.168 28.903,8.279 30.318,9.693z
    </Geometry>

    <Style x:Key="IncreaseDecreaseRepeatButtonBaseStyle"
           BasedOn="{StaticResource RepeatButtonStyle}"
           TargetType="RepeatButton">
        <Setter Property="BorderBrush" Value="{themes:FluentResource BasicBrush}" />
        <Setter Property="Foreground" Value="{themes:FluentResource IconBrush}" />
        <Setter Property="IsEnabled" Value="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={converters:InvertedBooleanConverter}}" />
        <Setter Property="Padding" Value="10,5" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{themes:FluentResource BasicBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="DecreaseRepeatButtonContentTemplate">
        <Image Width="16"
               Height="16"
               Stretch="Uniform">
            <Image.Source>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <DrawingGroup ClipGeometry="M0,0 V32 H32 V0 H0 Z">
                            <GeometryDrawing Brush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RepeatButton}}, Path=Foreground, Mode=OneWay}" Geometry="{StaticResource ArrowDownGeometry}" />
                        </DrawingGroup>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </Image.Source>
        </Image>
    </DataTemplate>
    <DataTemplate x:Key="IncreaseRepeatButtonContentTemplate">
        <Image Width="16"
               Height="16"
               Stretch="Uniform">
            <Image.Source>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <DrawingGroup ClipGeometry="M0,0 V32 H32 V0 H0 Z">
                            <GeometryDrawing Brush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RepeatButton}}, Path=Foreground, Mode=OneWay}" Geometry="{StaticResource ArrowUpGeometry}" />
                        </DrawingGroup>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </Image.Source>
        </Image>
    </DataTemplate>
    <Style x:Key="DecreaseRepeatButtonStyle"
           BasedOn="{StaticResource IncreaseDecreaseRepeatButtonBaseStyle}"
           TargetType="RepeatButton">
        <Setter Property="ContentTemplate" Value="{StaticResource DecreaseRepeatButtonContentTemplate}" />
    </Style>
    <Style x:Key="IncreaseRepeatButtonStyle"
           BasedOn="{StaticResource IncreaseDecreaseRepeatButtonBaseStyle}"
           TargetType="RepeatButton">
        <Setter Property="ContentTemplate" Value="{StaticResource IncreaseRepeatButtonContentTemplate}" />
    </Style>

    <ControlTemplate x:Key="NumericUpDownControlTemplate" TargetType="{x:Type controls:NumericUpDown}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="Column" Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="BorderVisual"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}" />
            <TextBox x:Name="textbox"
                     Padding="{TemplateBinding Padding}"
                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                     HorizontalContentAlignment="Stretch"
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                     Background="Transparent"
                     BorderThickness="0"
                     CaretBrush="{themes:FluentResource MarkerBrush}"
                     Focusable="{TemplateBinding Focusable}"
                     FontFamily="{TemplateBinding FontFamily}"
                     FontSize="{TemplateBinding FontSize}"
                     Foreground="{TemplateBinding Foreground}"
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Opacity="{themes:FluentResource InputOpacity}"
                     TabIndex="{TemplateBinding TabIndex}"
                     Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                    Path=Value,
                                    Mode=TwoWay,
                                    UpdateSourceTrigger=PropertyChanged}"
                     TextAlignment="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                             Path=HorizontalContentAlignment,
                                             Converter={converters:HorizontalContentAlignmentToTextAlignmentConverter}}">
                <TextBox.Template>
                    <ControlTemplate TargetType="TextBox">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Padding="{TemplateBinding Padding}"
                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Background="Transparent"
                                      BorderBrush="Transparent"
                                      BorderThickness="0"
                                      FontSize="{TemplateBinding FontSize}"
                                      IsTabStop="False"
                                      VerticalScrollBarVisibility="Auto" />
                    </ControlTemplate>
                </TextBox.Template>
            </TextBox>
            <RepeatButton x:Name="increase"
                          Grid.Column="2"
                          fluent:FluentAssist.CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                                     Path=(fluent:FluentAssist.CornerRadius),
                                                                     Converter={converters:CornerRadiusConverter},
                                                                     ConverterParameter=TopBottomRight}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                    Path=BorderThickness}"
                          Command="{x:Static controls:NumericUpDownCommands.IncreaseCommand}"
                          Style="{StaticResource IncreaseRepeatButtonStyle}" />
            <RepeatButton x:Name="decrease"
                          Grid.Column="1"
                          fluent:FluentAssist.CornerRadius="0"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                    Path=BorderThickness,
                                                    Converter={converters:ThicknessToOrientedThicknessConverter},
                                                    ConverterParameter=LeftTopBottom}"
                          Command="{x:Static controls:NumericUpDownCommands.DecreaseCommand}"
                          Style="{StaticResource DecreaseRepeatButtonStyle}" />
            <Border x:Name="ReadOnlyVisual"
                    Grid.ColumnSpan="3"
                    Background="{themes:FluentResource ReadOnlyBackgroundBrush}"
                    BorderBrush="{themes:FluentResource ReadOnlyBorderBrush}"
                    BorderThickness="{themes:FluentResource FocusThickness}"
                    CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                    IsHitTestVisible="False"
                    Visibility="Collapsed" />
            <Border x:Name="FocusVisual"
                    Grid.ColumnSpan="3"
                    Background="{x:Null}"
                    BorderBrush="{TemplateBinding fluent:FluentAssist.FocusBrush}"
                    BorderThickness="{themes:FluentResource FocusThickness}"
                    CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                    IsHitTestVisible="False"
                    Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ShowTextBox" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{themes:FluentResource MarkerMouseOverBrush}" />
                <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.MouseOverBrush), Mode=OneWay}" />
                <Setter TargetName="textbox" Property="Opacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsReadOnly" Value="True" />
                    <Condition Property="ShowTextBox" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="ReadOnlyVisual" Property="Visibility" Value="Visible" />
                <Setter TargetName="textbox" Property="Opacity" Value="{themes:FluentResource ReadOnlyOpacity}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsReadOnly" Value="True" />
                    <Condition Property="ShowButtons" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="decrease" Property="BorderBrush" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderBrush}" />
                <Setter TargetName="decrease" Property="BorderThickness" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderThickness, Converter={converters:ThicknessToOrientedThicknessConverter}, ConverterParameter=Left}" />
                <Setter TargetName="increase" Property="BorderBrush" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderBrush}" />
                <Setter TargetName="increase" Property="BorderThickness" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderThickness, Converter={converters:ThicknessToOrientedThicknessConverter}, ConverterParameter=Left}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowTextBox" Value="True" />
                    <Condition Property="ShowButtons" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="BorderVisual" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={converters:ThicknessToOrientedThicknessConverter}, ConverterParameter=LeftTopBottom}" />
                <Setter TargetName="BorderVisual" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.CornerRadius), Converter={converters:CornerRadiusConverter}, ConverterParameter=LeftTopBottom}" />
            </MultiTrigger>
            <Trigger Property="ShowTextBox" Value="False">
                <Setter TargetName="BorderVisual" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Column" Property="Width" Value="0" />
                <Setter TargetName="decrease" Property="fluent:FluentAssist.CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.CornerRadius), Converter={converters:CornerRadiusConverter}, ConverterParameter=LeftTopBottom}" />
                <Setter TargetName="textbox" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowTextBox" Value="False" />
                    <Condition Property="IsReadOnly" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="BorderVisual" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="decrease" Property="BorderBrush" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderBrush}" />
                <Setter TargetName="decrease" Property="BorderThickness" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderThickness, Converter={converters:ThicknessToOrientedThicknessConverter}, ConverterParameter=LeftTopBottom}" />
                <Setter TargetName="increase" Property="BorderBrush" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderBrush}" />
                <Setter TargetName="increase" Property="BorderThickness" Value="{Binding ElementName=ReadOnlyVisual, Path=BorderThickness, Converter={converters:ThicknessToOrientedThicknessConverter}, ConverterParameter=LeftTopRightBottom}" />
            </MultiTrigger>
            <Trigger Property="ShowButtons" Value="False">
                <Setter TargetName="decrease" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="increase" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    <Condition Property="ShowTextBox" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{themes:FluentResource MarkerMouseOverBrush}" />
                <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.MouseOverBrush), Mode=OneWay}" />
                <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                <Setter TargetName="textbox" Property="Opacity" Value="1" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BorderVisual" Property="Background" Value="{themes:FluentResource PrimaryBrush}" />
                <Setter TargetName="textbox" Property="Opacity" Value="{themes:FluentResource DisabledOpacity}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="NumericUpDownStyle" TargetType="controls:NumericUpDown">
        <Setter Property="Background" Value="{themes:FluentResource PrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{themes:FluentResource BasicBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontFamily" Value="{themes:FluentResource FontFamily}" />
        <Setter Property="FontSize" Value="{themes:FluentResource FontSize}" />
        <Setter Property="Foreground" Value="{themes:FluentResource MarkerBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="5,6" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template" Value="{StaticResource NumericUpDownControlTemplate}" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationTooltipTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="fluent:FluentAssist.CornerRadius" Value="{themes:FluentResource CornerRadius}" />
        <Setter Property="fluent:FluentAssist.FocusBrush" Value="{themes:FluentResource AccentFocusedBrush}" />
        <Setter Property="fluent:FluentAssist.MouseOverBrush" Value="{themes:FluentResource PrimaryMouseOverBrush}" />
    </Style>
    <Style BasedOn="{StaticResource NumericUpDownStyle}" TargetType="controls:NumericUpDown" />

</ResourceDictionary>