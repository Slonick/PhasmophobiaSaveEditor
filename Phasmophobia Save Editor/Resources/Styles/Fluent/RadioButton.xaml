<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fluent="clr-namespace:PhasmophobiaSaveEditor.Controls.Fluent"
                    xmlns:themes="clr-namespace:PhasmophobiaSaveEditor.Themes">

    <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{themes:FluentResource MainBrush}" />
        <Setter Property="BorderBrush" Value="{themes:FluentResource MainBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontFamily" Value="{themes:FluentResource FontFamily}" />
        <Setter Property="FontSize" Value="{themes:FluentResource FontSize}" />
        <Setter Property="Foreground" Value="{themes:FluentResource MarkerBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Border x:Name="BorderVisual"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="FocusVisual"
                                Background="{x:Null}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                      Path=(fluent:FluentAssist.FocusBrush)}"
                                BorderThickness="{themes:FluentResource FocusThickness}"
                                CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                                IsHitTestVisible="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="Collapsed" />
                        <fluent:FluentControl BorderThickness="{TemplateBinding BorderThickness}"
                                              CornerRadius="{TemplateBinding fluent:FluentAssist.CornerRadius}"
                                              IsSmartClipped="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ContentPresenter x:Name="Content"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              RecognizesAccessKey="True" />
                        </fluent:FluentControl>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  general setters for IsChecked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{themes:FluentResource MarkerInvertedBrush}" />
                            <Setter Property="fluent:FluentAssist.MouseOverBrush" Value="{themes:FluentResource AccentMouseOverBrush}" />
                            <Setter Property="fluent:FluentAssist.PressedBrush" Value="{themes:FluentResource AccentPressedBrush}" />
                            <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.CheckedBrush), Mode=OneWay}" />
                            <Setter TargetName="BorderVisual" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.CheckedBrush), Mode=OneWay}" />
                        </Trigger>

                        <!--  general setters for IsFocused  -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!--  General setters for IsMouseOver  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.MouseOverBrush), Mode=OneWay}" />
                            <Setter TargetName="BorderVisual" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.MouseOverBrush), Mode=OneWay}" />
                        </Trigger>

                        <!--  General setters for IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderVisual" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.PressedBrush), Mode=OneWay}" />
                            <Setter TargetName="BorderVisual" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(fluent:FluentAssist.PressedBrush), Mode=OneWay}" />
                        </Trigger>

                        <!--  disabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{themes:FluentResource AlternativeBrush}" />
                            <Setter Property="BorderBrush" Value="{themes:FluentResource AlternativeBrush}" />
                            <Setter TargetName="Content" Property="Opacity" Value="{themes:FluentResource DisabledOpacity}" />
                        </Trigger>

                        <!--  disabled and focused  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="fluent:FluentAssist.CheckedBrush" Value="{themes:FluentResource AccentBrush}" />
        <Setter Property="fluent:FluentAssist.CornerRadius" Value="{themes:FluentResource CornerRadius}" />
        <Setter Property="fluent:FluentAssist.FocusBrush" Value="{themes:FluentResource AccentFocusedBrush}" />
        <Setter Property="fluent:FluentAssist.MouseOverBrush" Value="{themes:FluentResource MouseOverBrush}" />
        <Setter Property="fluent:FluentAssist.PressedBrush" Value="{themes:FluentResource PressedBrush}" />
    </Style>
    <Style BasedOn="{StaticResource RadioButtonStyle}" TargetType="{x:Type RadioButton}" />

</ResourceDictionary>